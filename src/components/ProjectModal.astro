---
export interface Props {
  project: {
    id: string;
    title: string;
    category: string;
    description: string;
    images: string[];
    tags: string[];
    status: string;
    features: string[];
  };
}

const { project } = Astro.props;

const statusText: Record<string, string> = {
  completed: "Completado",
  in_progress: "En Desarrollo",
  pending: "Pendiente",
};

const statusColors: Record<string, string> = {
  completed: "bg-green-100 text-green-800 border-green-200",
  in_progress: "bg-yellow-100 text-yellow-800 border-yellow-200",
  pending: "bg-gray-100 text-gray-800 border-gray-200",
};

const categoryColors: Record<string, string> = {
  Casino: "bg-purple-100 text-purple-800 border-purple-200",
  Tipsters: "bg-blue-100 text-blue-800 border-blue-200",
  News: "bg-orange-100 text-orange-800 border-orange-200",
};
---

<!-- Modal Backdrop -->
<div
  id={`modal-${project.id}`}
  class="fixed h-full inset-0 bg-black bg-opacity-50 dark:bg-black dark:bg-opacity-70 backdrop-blur-sm z-50 hidden opacity-0 transition-opacity duration-300"
  data-modal
>
  <!-- Modal Container -->
  <div class="flex items-center justify-center min-h-screen p-4">
    <div
      class="bg-white dark:bg-gray-900 rounded-2xl shadow-2xl w-full h-[95vh] overflow-hidden transform scale-95 transition-transform duration-300"
      data-modal-content
    >
      <!-- Modal Body - Grid Layout -->
      <div class="h-full flex flex-col">
        <!-- Header with Title and Close Button -->
        <div
          class="flex-shrink-0 p-4 flex justify-between items-center border-b border-gray-100 dark:border-gray-700"
        >
          <div>
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-1">
              {project.title}
            </h2>
            <p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-2">
              {project.description}
            </p>
          </div>
          <button
            class="cursor-pointer text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full flex-shrink-0"
            data-close-modal
          >
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Main Content Area -->
        <div class="flex-1 flex min-h-0">
          <!-- Left Side - Main Image -->
          <div class="flex-1 p-4 flex flex-col">
            <div
              class="flex-1 relative bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden"
            >
              <img
                id={`main-image-${project.id}`}
                src={project.images[0]}
                alt={`${project.title} - Imagen principal`}
                class="w-full h-full object-cover"
                onerror="this.src='/images/placeholder.svg'"
              />

              <!-- Navigation Arrows -->
              {
                project.images.length > 1 && (
                  <>
                    <button
                      class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all"
                      data-prev-image
                    >
                      <svg
                        class="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 19l-7-7 7-7"
                        />
                      </svg>
                    </button>
                    <button
                      class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all"
                      data-next-image
                    >
                      <svg
                        class="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>
                  </>
                )
              }

              <!-- Image Counter -->
              <div
                class="absolute bottom-4 right-4 bg-black bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-70 text-white px-3 py-1 rounded-full text-sm"
              >
                <span id={`image-counter-${project.id}`}>1</span> / {
                  project.images.length
                }
              </div>
            </div>
          </div>

          <!-- Right Side - Thumbnails and Info -->
          <div
            class="w-80 p-4 flex flex-col border-l border-gray-100 dark:border-gray-700"
          >
            <!-- Thumbnails -->
            {
              project.images.length > 1 && (
                <div class="mb-4">
                  <h3 class="text-sm font-semibold text-gray-900 dark:text-white mb-2">
                    Imágenes ({project.images.length})
                  </h3>
                  <div class="grid grid-cols-3 gap-2 max-h-48 overflow-y-auto">
                    {project.images.map((image, index) => (
                      <button
                        class="relative aspect-square bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden hover:ring-2 hover:ring-purple-500 dark:hover:ring-purple-400 transition-all thumbnail-btn"
                        data-image-index={index}
                        data-thumbnail
                      >
                        <img
                          src={image}
                          alt={`${project.title} - Imagen ${index + 1}`}
                          class="w-full h-full object-cover"
                          onerror="this.src='/images/placeholder.svg'"
                        />
                      </button>
                    ))}
                  </div>
                </div>
              )
            }

            <!-- Features -->
            <div class="mb-4">
              <h3
                class="text-sm font-semibold text-gray-900 dark:text-white mb-2"
              >
                Características
              </h3>
              <div class="flex flex-wrap gap-1">
                {
                  project.features.map((feature) => (
                    <span class="px-2 py-1 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded text-xs font-medium border border-blue-100 dark:border-blue-800">
                      {feature}
                    </span>
                  ))
                }
              </div>
            </div>

            <!-- Tags -->
            <div class="mb-4">
              <h3
                class="text-sm font-semibold text-gray-900 dark:text-white mb-2"
              >
                Tags
              </h3>
              <div class="flex flex-wrap gap-1">
                {
                  project.tags.map((tag) => (
                    <span class="px-2 py-1 bg-purple-50 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 rounded text-xs font-medium border border-purple-100 dark:border-purple-800">
                      #{tag}
                    </span>
                  ))
                }
              </div>
            </div>

            <!-- Category and Status -->
            <div
              class="mt-auto pt-4 border-t border-gray-100 dark:border-gray-700"
            >
              <div class="flex flex-wrap gap-2">
                <span
                  class={`px-2 py-1 rounded-full text-xs font-semibold border ${categoryColors[project.category] || "bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600"}`}
                >
                  {project.category}
                </span>
                <span
                  class={`px-2 py-1 rounded-full text-xs font-semibold border ${statusColors[project.status] || "bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600"}`}
                >
                  {statusText[project.status] || project.status}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ projectId: project.id, images: project.images }}>
  function initializeModal() {
    const modal = document.getElementById(`modal-${projectId}`);
    const modalContent = modal?.querySelector("[data-modal-content]");
    const closeBtn = modal?.querySelector("[data-close-modal]");
    const mainImage = document.getElementById(`main-image-${projectId}`);
    const imageCounter = document.getElementById(`image-counter-${projectId}`);
    const prevBtn = modal?.querySelector("[data-prev-image]");
    const nextBtn = modal?.querySelector("[data-next-image]");
    const thumbnails = modal?.querySelectorAll("[data-thumbnail]");

    let currentImageIndex = 0;

    // Function to update main image
    function updateMainImage(index) {
      if (mainImage && imageCounter) {
        currentImageIndex = index;
        mainImage.src = images[index];
        imageCounter.textContent = (index + 1).toString();

        // Update thumbnail active state
        thumbnails?.forEach((thumb, i) => {
          if (i === index) {
            thumb.classList.add("ring-2", "ring-purple-500");
          } else {
            thumb.classList.remove("ring-2", "ring-purple-500");
          }
        });
      }
    }

    // Close modal function
    function closeModal() {
      if (modal && modalContent) {
        modal.classList.add("opacity-0");
        modalContent.classList.add("scale-95");
        setTimeout(() => {
          modal.classList.add("hidden");
        }, 300);
      }
    }

    // Event listeners
    closeBtn?.addEventListener("click", closeModal);

    modal?.addEventListener("click", (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    prevBtn?.addEventListener("click", () => {
      const newIndex =
        currentImageIndex > 0 ? currentImageIndex - 1 : images.length - 1;
      updateMainImage(newIndex);
    });

    nextBtn?.addEventListener("click", () => {
      const newIndex =
        currentImageIndex < images.length - 1 ? currentImageIndex + 1 : 0;
      updateMainImage(newIndex);
    });

    thumbnails?.forEach((thumb, index) => {
      thumb.addEventListener("click", () => {
        updateMainImage(index);
      });
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (!modal?.classList.contains("hidden")) {
        if (e.key === "Escape") {
          closeModal();
        } else if (e.key === "ArrowLeft") {
          prevBtn?.click();
        } else if (e.key === "ArrowRight") {
          nextBtn?.click();
        }
      }
    });

    // Initialize first thumbnail as active
    updateMainImage(0);
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeModal);
  } else {
    initializeModal();
  }
</script>
